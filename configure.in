dnl# -*- sh -*-
dnl# the "configure" script is made from this by running GNU "autoconf"
dnl#
dnl# Configuration script for Dreammp3
dnl#
dnl# by BeN(jamin) Gerard <ben@sashipa.com>


AC_INIT(main.c)
AC_PROG_MAKE_SET

PACKAGE=dreammp3
VERSION=1.0
DREAMMP3_URL="http://sashipa.ben.free.fr/dreammp3"
TOP_DIR="`pwd`"

# ENABLE OPTIONS
AC_ARG_ENABLE(debug,    [  --enable-debug          Compile with debug facilities [default=no]], DEBUG="yes", DEBUG="no")
AC_ARG_ENABLE(release,  [  --enable-release        Compile for release version [default=no]], RELEASE="yes", RELEASE="no")

# WITH OPTIONS
AC_ARG_WITH(sh-prefix,  [  --with-sh-prefix        Specify sh tools prefix [default=]],  SHPREFIX="$with_sh_prefix", SHPREFIX="")
AC_ARG_WITH(arm-prefix, [  --with-arm-prefix       Specify arm tools prefix [default=]],  ARMPREFIX="$with_arm_prefix", ARMPREFIX="")
AC_ARG_WITH(kos,        [  --with-kos              Specify kos [default=kos]], KOS_BASE="$with_kos", KOS_BASE="kos")

# Display a warning message if target specific prefix nor specific target
# compiler have been setted.
# This test is not very accurate since it does not test for other tools.
if test -z "$SHPREFIX" -a -z "$SH_CC"; then
    AC_MSG_RESULT([WARNING: You do *NOT* have specified an sh-prefix nor a default sh compiler (SH_CC).])
fi

if test -z "$ARMPREFIX" -a -z "$ARM_CC"; then
    AC_MSG_RESULT([WARNING: You do *NOT* have specified an arm-prefix nor a default arm compiler (ARM_CC).])
fi

# Configure include/config.h
[
PACKAGE_STR="\"$PACKAGE\""
VERSION_STR="\"$VERSION\""
VERSION_MAJOR=`expr "$VERSION" : '\([0-9]*\).*' \| 1`
VERSION_MINOR=`expr "$VERSION" : '[0-9]*\.\([0-9]*\)' \| 0`]
VERSION_NUM=0x`printf "%d%02d" $VERSION_MAJOR $VERSION_MINOR`
BREAKPOINT="[{*(int *)1 = (N)}]"
DREAMMP3_URL_STR="\"$DREAMMP3_URL\""
]
AC_SUBST(PACKAGE)
AC_SUBST(PACKAGE_STR)
AC_SUBST(VERSION)
AC_SUBST(VERSION_STR)
AC_SUBST(VERSION_NUM)
AC_SUBST(BREAKPOINT)
AC_SUBST(DREAMMP3_URL_STR)
test $DEBUG != "yes"
DEBUG=$?
AC_SUBST(DEBUG)

test $RELEASE != "yes"
RELEASE=$?
AC_SUBST(RELEASE)

DEL="rm -f"

AC_MSG_RESULT([*******************************])
AC_MSG_RESULT([*                           ***])
AC_MSG_RESULT([** Configure DREAMCAST tools **])
AC_MSG_RESULT([***                           *])
AC_MSG_RESULT([*******************************])

if test -z "$SH_CC"; then
    AC_PATH_PROG(SH_CC,       ${SHPREFIX}gcc,       ${SHPREFIX}gcc,      echo, [$PATH])
fi
if test -z "$SH_CXX"; then
    AC_PATH_PROG(SH_CXX,      ${SHPREFIX}g++,      ${SHPREFIX}g++,      echo, [$PATH])
fi
if test -z "$SH_AS"; then
    AC_PATH_PROG(SH_AS,       ${SHPREFIX}as,       ${SHPREFIX}as,       echo, [$PATH])
fi
if test -z "$SH_AR"; then
    AC_PATH_PROG(SH_AR,       ${SHPREFIX}ar,       ${SHPREFIX}ar,       echo, [$PATH])
fi
if test -z "$SH_RANLIB"; then
    AC_PATH_PROG(SH_RANLIB,   ${SHPREFIX}ranlib,   ${SHPREFIX}ranlib,   echo, [$PATH])
fi
if test -z "$SH_OBJCOPY"; then
    AC_PATH_PROG(SH_OBJCOPY,  ${SHPREFIX}objcopy,  ${SHPREFIX}objcopy,  echo, [$PATH])
fi
if test -z "$SH_OBJDUMP"; then
    AC_PATH_PROG(SH_OBJDUMP,  ${SHPREFIX}objdump,  ${SHPREFIX}objdump,  echo, [$PATH])
fi
if test -z "$SH_LD"; then
    AC_PATH_PROG(SH_LD,       ${SHPREFIX}ld,       ${SHPREFIX}ld,       echo, [$PATH])
fi
if test -z "$SH_NM"; then
    AC_PATH_PROG(SH_NM,       ${SHPREFIX}nm,       ${SHPREFIX}nm,       echo, [$PATH])
fi
if test -z "$SH_STRIP"; then
    AC_PATH_PROG(SH_STRIP,       ${SHPREFIX}strip,       ${SHPREFIX}strip,       echo, [$PATH])
fi
REQUIRED_SH_TOOLS="$SH_AS $SH_CC $SH_LD"
REQUIRED_SH_TOOLS="$REQUIRED_SH_TOOLS $SH_AR $SH_RANLIB"
REQUIRED_SH_TOOLS="$REQUIRED_SH_TOOLS $SH_NM $SH_OBJCOPY $SH_OBJDUMP $SH_STRIP"

if test -z "$ARM_CC"; then
    AC_PATH_PROG(ARM_CC,       ${ARMPREFIX}gcc,       ${ARMPREFIX}gcc,      echo, [$PATH])
fi
if test -z "$ARM_CXX"; then
    AC_PATH_PROG(ARM_CXX,      ${ARMPREFIX}g++,      ${ARMPREFIX}g++,      echo, [$PATH])
fi
if test -z "$ARM_AS"; then
    AC_PATH_PROG(ARM_AS,       ${ARMPREFIX}as,       ${ARMPREFIX}as,       echo, [$PATH])
fi
if test -z "$ARM_AR"; then
    AC_PATH_PROG(ARM_AR,       ${ARMPREFIX}ar,       ${ARMPREFIX}ar,       echo, [$PATH])
fi
if test -z "$ARM_RANLIB"; then
    AC_PATH_PROG(ARM_RANLIB,   ${ARMPREFIX}ranlib,   ${ARMPREFIX}ranlib,   echo, [$PATH])
fi
if test -z "$ARM_OBJCOPY"; then
    AC_PATH_PROG(ARM_OBJCOPY,  ${ARMPREFIX}objcopy,  ${ARMPREFIX}objcopy,  echo, [$PATH])
fi
if test -z "$ARM_LD"; then
    AC_PATH_PROG(ARM_LD,       ${ARMPREFIX}ld,       ${ARMPREFIX}ld,       echo, [$PATH])
fi
if test -z "$ARM_NM"; then
    AC_PATH_PROG(ARM_NM,       ${ARMPREFIX}nm,       ${ARMPREFIX}nm,       echo, [$PATH])
fi
REQUIRED_ARM_TOOLS="$ARM_CC $ARM_AS $ARM_AR $ARM_RANLIB $ARM_LD $ARM_NM $ARM_OBJCOPY"

REQUIRED_DC_TOOLS="$REQUIRED_SH_TOOLS $REQUIRED_ARM_TOOLS"

for i in $REQUIRED_DC_TOOLS; do
    if test "x$i" = "xecho"; then
        AC_MSG_ERROR([Could not find all required tools to compile for dreamcast in your PATH.])
    fi
done

SH_CFLAGS="-Wall -O4"
if test $DEBUG -ne 0; then
    SH_CFLAGS="$SH_CFLAGS -g"
fi
SH_CFLAGS="$SH_CFLAGS -ml -m4-single-only"
SH_CFLAGS="$SH_CFLAGS -fno-builtin -fno-strict-aliasing -fomit-frame-pointer"
SH_CXXFLAGS="$SH_CFLAGS -fno-operator-names -fno-rtti -fno-exceptions"
SH_ASFLAGS="-little"
SH_ARFLAGS="cr"
SH_LDFLAGS="-ml -m4-single-only -nostartfiles -nostdlib -static -Wl,-Ttext=0x8c010000"

ARM_CFLAGS="-mcpu=arm7 -Wall -O2"
ARM_AFLAGS="-marm7"

if test -z "$MAKE"; then
    AC_PATH_PROG(MAKE, make, echo, [$PATH])
fi

if test -z "$MAKEDEPEND"; then
    AC_PATH_PROG(MAKEDEPEND, makedepend, echo, $PATH)
fi

if test -z "$DOXYGEN"; then
    AC_PATH_PROG(DOXYGEN, doxygen, echo,  $PATH)
fi

DOC_DIR=""
if test "x$doxygen" != "xecho"; then
    DOC_DIR=doc
fi

AC_MSG_RESULT([***************************])
AC_MSG_RESULT([*                       ***])
AC_MSG_RESULT([** Configure KallistiOS  **])
AC_MSG_RESULT([***                       *])
AC_MSG_RESULT([***************************])
if test ! -d "$KOS_BASE" ; then
    AC_MSG_ERROR([KallistiOS '$KOS_BASE' not found. Use --with-kos.])
else
    AC_MSG_RESULT([checking for KalistiOS... $KOS_BASE])
fi
SH_LDFLAGS="$SH_LDFLAGS -L$KOS_BASE"

AC_PATH_PROG(KOS_GENROMFS, $KOS_BASE/utils/genromfs/genromfs, $KOS_BASE/utils/genromfs/genromfs, no, $PATH:$KOS_BASE/utils/genromfs)
if test "x$KOS_GENROMFS" = "xno"; then
    AC_MSG_ERROR([Could not find kos gemromfs program.])
fi

AC_PATH_PROG(KOS_BIN2O, $KOS_BASE/utils/bin2o/bin2o, $KOS_BASE/utils/bin2o/bin2o, no, $PATH:$KOS_BASE/utils/bin2o)
if test "x$KOS_BIN2O" = "xno"; then
    AC_MSG_ERROR([Could not find kos bin2o program.])
fi

AC_MSG_RESULT([--------------------------------------])



CC="$SH_CC"
CFLAGS="$SH_CFLAGS -I."
CXX="$SH_CXX"
CXXFLAGS="$SH_CXXFLAGS -I."
AS="$SH_AS"
ASFLAGS="$SH_ASFLAGS"
AR="$SH_AR"
ARFLAGS="$SH_ARFLAGS"
RANLIB="$SH_RANLIB"
LD="$SH_LD"
LDFLAGS="$SH_LDFLAGS"
OBJCOPY="$SH_OBJCOPY"

#AC_PROG_CC
#AC_PROG_RANLIB
AC_PROG_MAKE_SET

AC_SUBST(DREAMMP3URL)
AC_SUBST(TOP_DIR)
AC_SUBST(DOC_DIR)
AC_SUBST(DOXYGEN)
AC_SUBST(LIBCOMMAND)
AC_SUBST(DEL)

AC_SUBST(SH_AS)
AC_SUBST(SH_CC)
AC_SUBST(SH_CXX)
AC_SUBST(SH_LD)

AC_SUBST(SH_AR)
AC_SUBST(SH_RANLIB)

AC_SUBST(SH_OBJCOPY)
AC_SUBST(SH_OBJDUMP)
AC_SUBST(SH_STRIP)

AC_SUBST(MAKE)
AC_SUBST(MAKEDEPEND)

AC_SUBST(SH_CFLAGS)
AC_SUBST(SH_CXXFLAGS)
AC_SUBST(SH_ASFLAGS)
AC_SUBST(SH_ARFLAGS)
AC_SUBST(SH_LDFLAGS)

AC_SUBST(ARM_AS)
AC_SUBST(ARM_CC)
AC_SUBST(ARM_CXX)

AC_SUBST(ARM_AR)
AC_SUBST(ARM_RANLIB)

AC_SUBST(ARM_OBJCOPY)
AC_SUBST(ARM_LD)

AC_SUBST(ARM_CFLAGS)
AC_SUBST(ARM_CXXFLAGS)
AC_SUBST(ARM_ASFLAGS)
AC_SUBST(ARM_ARFLAGS)
AC_SUBST(ARM_LDFLAGS)

AC_SUBST(KOS_ARCH)
AC_SUBST(KOS_LOADER)
AC_SUBST(KOS_BASE)
AC_SUBST(KOS_GENROMFS)
AC_SUBST(KOS_BIN2O)

AC_OUTPUT(
 [Makefile.inc]
 [arm/Makefile]
 [doc/Makefile]
 [include/config.h:config.h.in])

echo -n "making required files... " >&6
reply="success"
touch .depends
${MAKE} -s required >&5 || reply="failed"
echo "$reply" >&6

if test $DEBUG -eq 0; then DEBUG=no; else DEBUG=yes; fi
if test $RELEASE -eq 0; then RELEASE=no; else RELEASE=yes; fi

AC_MSG_RESULT([**************************************])
AC_MSG_RESULT([* Compilation options summary:])
AC_MSG_RESULT([*   debug-mode          : $DEBUG])
AC_MSG_RESULT([*   release-mode        : $RELEASE])
AC_MSG_RESULT([*   sh (core) prefix    : $SHPREFIX])
AC_MSG_RESULT([*   arm (audio) prefix  : $ARMPREFIX])
AC_MSG_RESULT([*   kos                 : $KOS_BASE])
AC_MSG_RESULT([*   doxygen             : $DOXYGEN])
AC_MSG_RESULT([**************************************])

dnl#
dnl# End of "$Id: configure.in,v 1.6 2002-09-10 23:41:53 ben Exp $".
dnl#
