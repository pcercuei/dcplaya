# Generic makefile for Dreammp3
#
# (C) COPYRIGHT 2002 Ben(jamin) Gerard
#
# $id$
#
# Get default target object files
#

TOP_DIR="@TOP_DIR@"
UTILS_DIR=$(TOP_DIR)/Utils
export TOP_DIR UTILS_DIR

# ----------------------------------------------------------------------
# Setup for KOS
# ----------------------------------------------------------------------

# Build architecture
KOS_ARCH="dreamcast"

# KOS base paths
KOS_BASE=@KOS_BASE@
KOS_INCS+= -I$(KOS_BASE)/include

export KOS_ARCH KOS_BASE KOS_INCS

# Make utility
@SET_MAKE@
KOS_MAKE=$(MAKE)
MAKEDEPEND=@MAKEDEPEND@

# Dreamcast loader utility
KOS_LOADER=@KOS_LOADER@

# Genromfs utility
KOS_GENROMFS=@KOS_GENROMFS@

# Binary to object
KOS_BIN2O=@KOS_BIN2O@

export KOS_MAKE KOS_LOADER KOS_BIN2O

# SH-4 compile tools
KOS_CC=@SH_CC@
KOS_CXX=@SH_CXX@
KOS_AS=@SH_AS@
KOS_LD=@SH_LD@
export KOS_CC KOS_CXX KOS_AS KOS_LD

# SH-4 bin utils
KOS_AR=@SH_AR@
KOS_RANLIB=@SH_RANLIB@
KOS_OBJCOPY=@SH_OBJCOPY@
KOS_OBJDUMP=@SH_OBJDUMP@
KOS_NM=@SH_NM@
KOS_STRIP=@SH_STRIP@
export KOS_AR KOS_RANLIB KOS_OBJCOPY KOS_OBJDUMP KOS_NM KOS_STRIP

# SH-4 compile flags
KOS_CFLAGS=@SH_CFLAGS@
KOS_CXXFLAGS=@SH_CXXFLAGS@
KOS_AFLAGS=-little
KOS_LDFLAGS=-ml -m4-single-only -nostartfiles -nostdlib -Wl,-Ttext=0x8c010000
export KOS_CFLAGS KOS_CPPFLAGS KOS_AFLAGS KOS_LDFLAGS

ifndef OBJS
C_SRCS = $(wildcard *.c) 
CXX_SRCS = $(wildcard *.cxx) 

C_OBJS = $(C_SRCS:%.c=%.o)
CXX_OBJS = $(CXX_SRCS:%.cxx=%.o)

SRCS = $(C_SRCS) $(CXX_SRCS)
OBJS = $(C_OBJS) $(CXX_OBJS)
endif

ifeq '$(LIBRARY)' 'yes'
ifndef LIBNAME
LIBNAME := lib$(shell basename `pwd`).a
endif
endif

# ----------------------------------------------------------------------
OPT_FLOAT   = -ffast-math
OPT_GENERAL = -fomit-frame-pointer -fno-builtin -fno-strict-aliasing
OPT_SPEED   = -O3 -funroll-loops -finline-functions
OPT_SIZE    = -Os -fno-inline 

OPTIMIZE_FOR_SPEED = $(OPT_GENERAL) $(OPT_FLOAT) $(OPT_SPEED)
OPTIMIZE_FOR_SIZE  = $(OPT_GENERAL) $(OPT_SIZE)

ifndef OPTIMIZE
OPTIMIZE = $(OPT_GENERAL)
endif

# ----------------------------------------------------------------------

KOS_LOCAL_CFLAGS += $(OPTIMIZE)

DEPEND_INCS = $(KOS_LOCAL_INCS) $(KOS_INCS) -I$(KOS_BASE)/kernel/arch/$(KOS_ARCH)/include
DEPEND_DEFINES = -D_arch_$(KOS_ARCH) $(filter -D%, $(KOS_CFLAGS) $(KOS_LOCAL_CFLAGS))

ifeq "$(strip $(TARGETS))" ""
TARGETS=$(LEFS) $(ELFS)
endif

ifeq "$(strip $(TARGETS))" ""
TARGETS:=$(LIBNAME)
endif

ifeq "$(strip $(TARGETS))" ""
TARGETS:=$(OBJS)
endif

ifeq "$(strip $(TARGETS) $(SUBDIRS))" ""
all:;@echo 'Nothing to make!'
else
all : subdirs $(TARGETS)
	@echo "Target project [$(TARGETS)] has been build"
endif

$(LIBNAME) : $(OBJS)
	@echo "Build library [$@]"
	@rm -f $@
	@$(KOS_AR) r $@ $^
	@$(KOS_RANLIB) $@

%.elf : $(OBJS)
	@echo "Build [$@] from [$^]"
	$(KOS_LD) -b elf32-shl -EL -r -x -O -S $^ $(ELF_EXTRA) -o $@

%.lef : $(OBJS) #lib%.a
	@echo "Build [$@] from [$^]"
	@$(KOS_LD) -b elf32-shl -d -O 3 -EL -r --cref -M -Map $*.map -x -O -S $^ $(LEF_EXTRA) -o $@
	@$(KOS_STRIP) --strip-unneeded $@
	@$(KOS_OBJDUMP) -t $@ | grep '*COM*' || echo ":_) No *COM* found."

%.bin : %.elf
	@$(KOS_OBJCOPY) -O binary $< $@


subdirs: $(patsubst %, _dir_%, $(SUBDIRS))

$(patsubst %, _dir_%, $(SUBDIRS)):
	$(MAKE) -C $(patsubst _dir_%, %, $@)

# ----------------------------------------------------------------------
# Clean rules
# ----------------------------------------------------------------------
clean_subdirs: $(patsubst %, _clean_dir_%, $(SUBDIRS))

$(patsubst %, _clean_dir_%, $(SUBDIRS)):
	$(MAKE) -C $(patsubst _clean_dir_%, %, $@) clean

clean: clean_subdirs clean_local

clean_local:
	rm -f $(LEFS) $(OBJS) *~ $(CLEAN_LOCAL) $(LIBNAME) $(TARGETS) *.map

distclean: depend-clean clean
	@rm -f TAGS ID
	@rm -f include/config.h Makefile.inc
	@rm -f config.cache config.log stamp-h stamp-h[0-9]*
	@find . -name '*~' -exec rm -f {} \;

maintainer-clean: distclean 
	@rm -f config.cache config.log config.status configure

# ----------------------------------------------------------------------
# Dependencies
# ----------------------------------------------------------------------
$(patsubst %, _dep_dir_%, $(SUBDIRS)):
	@$(MAKE) -C $(patsubst _dir_%, %, $@)

depend_subdirs: $(patsubst %, _depend_dir_%, $(SUBDIRS))

$(patsubst %, _depend_dir_%, $(SUBDIRS)):
	@$(MAKE) -C $(patsubst _depend_dir_%, %, $@) depend

.PHONY: .depends
.depends:
	$(MAKEDEPEND) -f$@\
	-Y \
	$(filter -I%, $(DEPEND_INCS)) \
	$(filter -D%, $(DEPEND_DEFINES)) \
	$(OBJS:%.o=%.c) && rm -f $@.bak
	echo "DEPENDENCIES [$@]"

dep depend: .depends depend_subdirs $(DEPEND_EXTRA)

$(patsubst %, _depend-clean_dir_%, $(SUBDIRS)):
	@$(MAKE) -C $(patsubst _depend-clean_dir_%, %, $@) depend-clean

depend-clean_subdirs: $(patsubst %, _depend-clean_dir_%, $(SUBDIRS))

dependclean depclean clean-depend depend-clean : depend-clean_subdirs
	@rm -f .depends
	@touch .depends

# ----------------------------------------------------------------------
# Required
# ----------------------------------------------------------------------
$(patsubst %, _required_dir_%, $(SUBDIRS)):
	@$(MAKE) -C $(patsubst _required_dir_%, %, $@) required

required_subdirs: $(patsubst %, _required_dir_%, $(SUBDIRS))

req required: required_subdirs $(REQUIRED_LOCAL)
	@touch .depends $(addsuffix /.depends, $(SUBDIRS))

# ----------------------------------------------------------------------

# Remove standard includes, assumes local includes are "" and kos are <>
KOS_INC_RULES=$(KOS_LOCAL_INCS) -I- $(KOS_INCS) -I$(KOS_BASE)/kernel/arch/$(KOS_ARCH)/include

# Build rules
%.o: %.c
	$(KOS_CC) $(KOS_CFLAGS) $(KOS_LOCAL_CFLAGS) $(KOS_INC_RULES) -D_arch_$(KOS_ARCH) -c $< -o $@

%.o: %.cxx
	$(KOS_CXX) $(KOS_CXXFLAGS) $(KOS_LOCAL_CXXFLAGS) $(KOS_INC_RULES) -D_arch_$(KOS_ARCH) -c $< -o $@

%.o: %.s
	$(KOS_AS) $(KOS_AFLAGS) $< -o $@

%.o: %.img
	KOS_ARCH=$(KOS_ARCH) KOS_LD=$(KOS_LD) $(KOS_BIN2O) $< $(notdir $*) $@

# Some extra variables
KOS_ARCH_DIR = $(KOS_BASE)/kernel/arch/$(KOS_ARCH)
KOS_START = $(KOS_ARCH_DIR)/kernel/startup.o

